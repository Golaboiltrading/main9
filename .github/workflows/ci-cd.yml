name: Oil & Gas Finder CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and code quality checks
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Secret detection with GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Frontend testing and build
  frontend-pipeline:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run ESLint
      run: yarn lint
      continue-on-error: true

    - name: Run unit tests
      run: yarn test --coverage --ci
      env:
        CI: true

    - name: Build production bundle
      run: yarn build
      env:
        CI: true
        REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL || 'https://oilgasfinder.com' }}
        GENERATE_SOURCEMAP: false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 30

  # Backend testing and build
  backend-pipeline:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r . -x tests/ || true
        safety check || true

    - name: Test database connectivity
      run: python database_optimization.py
      env:
        MONGO_URL: mongodb://localhost:27017

    - name: Start FastAPI server for testing
      run: |
        python -m uvicorn server:app --host 0.0.0.0 --port 8001 &
        sleep 10
      env:
        MONGO_URL: mongodb://localhost:27017
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test

    - name: Test API endpoints
      run: |
        curl -f http://localhost:8001/api/status
        echo "API status check passed"

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-analysis, frontend-pipeline, backend-pipeline]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.oilgasfinder.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy notification
      run: echo "Deploying to staging environment"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-analysis, frontend-pipeline, backend-pipeline]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://oilgasfinder.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release of Oil & Gas Finder
          
          ## Security Features
          - Enhanced JWT authentication with session tracking
          - Rate limiting and injection prevention
          - Comprehensive input validation
          - Security headers and CORS protection
          
          ## Performance Improvements
          - Database indexing optimization (40+ indexes)
          - React code splitting and lazy loading
          - Redis caching implementation
          - Query optimization with aggregation pipelines
        draft: false
        prerelease: false

    - name: Deploy notification
      run: echo "Deploying to production environment"